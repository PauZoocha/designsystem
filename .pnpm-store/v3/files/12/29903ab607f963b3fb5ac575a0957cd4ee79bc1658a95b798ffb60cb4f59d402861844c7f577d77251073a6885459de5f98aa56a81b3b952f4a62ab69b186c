"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.array.iterator.js");

var _core = require("@wingsuit-designsystem/core");

var _configParser = require("../../configParser");

const {
  join,
  relative
} = require('path');

const inqfs = require('inquirer-fs-selector');

const Generator = require('yeoman-generator');

class _default extends Generator {
  constructor(...args) {
    super(...args);
    this.targetFolder = void 0;
  }

  initializing() {
    this.env.adapter.promptModule.registerPrompt('fs', inqfs);
    const apps = (0, _core.getApps)();
    apps.forEach(app => {
      if (app.generator !== undefined) {
        const generatorInfo = app.generator('ws:app', this);

        if (generatorInfo != null) {
          this.composeWith(generatorInfo);
        }
      }
    });
  }

  prompting() {
    this.log(`Hi! This will help you build a app `);
    const prompts = [{
      type: 'list',
      name: 'appType',
      message: 'Which app should be used?',

      choices() {
        return (0, _core.getAppTypes)(null);
      }

    }, {
      name: 'location',
      message: 'Choose a directory for your app?',
      type: 'fs',
      basePath: './apps',
      options: {
        displayHidden: false,
        displayFiles: false,
        canSelectFile: false,
        icons: false // not show icons

      }
    }, {
      name: 'appName',
      message: 'What shall we name it?',

      filter(answer) {
        return answer;
      }

    }];
    return this.prompt(prompts).then(props => {
      this.props = props;
    });
  }

  getTargetFolder() {
    return this.targetFolder;
  }

  getProps() {
    return this.props;
  }

  writing() {
    try {
      const {
        appType,
        location,
        appName
      } = this.props;
      const targetFolder = join(location.path, appName);
      this.targetFolder = targetFolder;
      const coreTypes = ['drupal', 'storybook', 'cms'];

      if (coreTypes.includes(appType)) {
        this.fs.copyTpl(this.templatePath(`${appType}/**/*.ejs`), targetFolder, this.props);
      }

      const source = this.fs.read(this.destinationPath('wingsuit.config.js'));
      const relativeTargetFolder = relative(process.cwd(), targetFolder);
      const updatedWingsuitConfig = (0, _configParser.addApp)(appName, appType, [{
        name: 'path',
        value: relativeTargetFolder
      }], source);
      this.fs.write(this.destinationPath('wingsuit.config.js'), updatedWingsuitConfig);
      this.log(`Your new app ${appName} is being created.`);
    } catch (err) {
      if (err instanceof Error) {
        this.log(`Error while creating component. ${err.message}`);
      } else {
        this.log(err);
      }
    }
  }

}

exports.default = _default;