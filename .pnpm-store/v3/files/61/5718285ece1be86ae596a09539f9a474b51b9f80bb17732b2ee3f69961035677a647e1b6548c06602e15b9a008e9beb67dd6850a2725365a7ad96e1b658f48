import IPatternStorage from './IPatternStorage';
import Pattern from './Pattern';
import PatternVariant from './PatternVariant';
import { IPatternDefinition, IPatternDefinitions } from './definition';
export default class PatternStorage implements IPatternStorage {
    private definitions;
    private namespaces;
    private globals;
    private patterns;
    private twigResources;
    addGlobal(name: string, value: {}): void;
    getGlobals(): {};
    setNamespaces(namespaces: {}): void;
    getNamespaces(): {};
    getPatternIds(): string[];
    loadPatternsByNamespace(namespace: any): Pattern[];
    /**
     * Performs a deep merge of objects and returns new object. Does not modify
     * objects (immutable) and merges arrays via concatenation.
     *
     * @param {...object} objects - Objects to merge
     * @returns {object} New object with merged key/values
     */
    private mergeDeep;
    private extendPatternDefinition;
    loadPattern(patternId: string): Pattern;
    loadVariant(patternId: string, variantId: string): PatternVariant;
    createDefinitions(definitions: IPatternDefinitions): void;
    createDefinitionsFromMultiContext(any: any): void;
    createDefinitionsFromContext(context: any): void;
    addDefinition(id: string, pattern: IPatternDefinition): void;
    findTwigByNamespace(namespace: any): any | null;
    findTwigById(id: any): any | null;
    createGlobalsFromContext(context: any): void;
    createTwigStorageFromContext(context: any): void;
    getTwigResources(): {};
    addTwig(namespace: any, resource: any): void;
}
