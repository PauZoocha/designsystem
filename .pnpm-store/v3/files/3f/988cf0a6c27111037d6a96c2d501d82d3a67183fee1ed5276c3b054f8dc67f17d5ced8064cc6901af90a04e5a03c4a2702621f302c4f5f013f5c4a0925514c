"use strict";

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.name = name;
exports.webpack = webpack;

var path = _interopRequireWildcard(require("path"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var CopyPlugin = require('copy-webpack-plugin');

function name(appConfig) {
  return 'assets';
}

function webpack(appConfig) {
  // Storybook needs entries as array. For other apps assets keys are prefered.
  var entryPoints = appConfig.type === 'storybook' ? [path.resolve(appConfig.path, 'assets.js')] : {
    assets: path.resolve(appConfig.path, 'assets.js')
  };
  return {
    entry: entryPoints,
    plugins: [new CopyPlugin([{
      from: 'images/*',
      to: appConfig.assetBundleFolder
    }])],
    module: {
      rules: [{
        test: /.*[/|\\\\]fonts[/|\\\\].*\.(svg|woff|woff2|eot|ttf|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
        use: [{
          loader: 'file-loader',
          options: {
            outputPath: path.join(appConfig.assetBundleFolder, 'font'),
            name: '[name].[ext]?[hash]'
          }
        }]
      }, {
        loader: 'file-loader',
        test: /.*[/|\\\\]images[/|\\\\].*\.svg$/,
        options: {
          outputPath: path.join(appConfig.assetBundleFolder, 'images'),
          name: '[name].[ext]'
        }
      }, {
        loader: 'file-loader',
        test: /\.(png|jpg|gif|webp)$/,
        options: {
          outputPath: path.join(appConfig.assetBundleFolder, 'images'),
          name: '[name].[ext]'
        }
      }]
    }
  };
}