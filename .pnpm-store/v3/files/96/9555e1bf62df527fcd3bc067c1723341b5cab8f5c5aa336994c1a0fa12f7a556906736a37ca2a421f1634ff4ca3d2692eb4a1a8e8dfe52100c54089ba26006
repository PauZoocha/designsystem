"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drupalAttachBehaviorDecorator = drupalAttachBehaviorDecorator;

require("core-js/modules/web.timers.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.object.define-property.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/*
@deprecated
Use behaviors instead.
 */
window.Drupal = {
  behaviors: {}
};

function drupalAttachBehaviorDecorator(storyFn) {
  console.error('attachBehaviorDecorator in your apps/storybook/preview.js is deprecated.');
  console.error('Please replace your preview.js with https://github.com/wingsuit-designsystem/wingsuit/blob/master/starter-kits/tailwind/apps/storybook/preview.js.');
  return storyFn();
}

var Drupal = /*#__PURE__*/function () {
  function Drupal() {
    _classCallCheck(this, Drupal);

    this.behaviors = {};
  }

  _createClass(Drupal, null, [{
    key: "throwError",
    value: function throwError(error) {
      setTimeout(function () {
        throw error;
      }, 0);
    }
  }, {
    key: "attachBehaviors",
    value: function attachBehaviors() {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var behaviors = window.Drupal.behaviors;
      window.setTimeout(function () {
        Object.keys(behaviors).forEach(function (i) {
          if (typeof behaviors[i].attach === 'function') {
            try {
              behaviors[i].attach(context, settings);
            } catch (e) {
              Drupal.throwError(e);
            }
          }
        });
      }, 300);
    }
  }]);

  return Drupal;
}();