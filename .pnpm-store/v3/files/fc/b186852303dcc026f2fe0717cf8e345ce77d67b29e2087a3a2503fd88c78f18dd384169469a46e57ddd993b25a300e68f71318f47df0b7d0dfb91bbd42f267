"use strict";

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.number.is-nan.js");

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.parse-int.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.object.define-property.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var faker = require('faker');

var Property = /*#__PURE__*/function () {
  function Property(name, type, label, description, preview) {
    _classCallCheck(this, Property);

    this.name = void 0;
    this.type = void 0;
    this.label = void 0;
    this.description = void 0;
    this.preview = void 0;
    this.enable = true;
    this.name = name;
    this.type = type;
    this.label = label;
    this.description = description;
    this.preview = preview;
  }

  _createClass(Property, [{
    key: "getDescription",
    value: function getDescription() {
      if (this.description === undefined) {
        return '';
      }

      return this.description;
    }
  }, {
    key: "isEnable",
    value: function isEnable() {
      return this.enable;
    }
  }, {
    key: "setEnable",
    value: function setEnable(value) {
      this.enable = value;
    }
  }, {
    key: "setDescription",
    value: function setDescription(value) {
      this.description = value;
    }
  }, {
    key: "generateFake",
    value: function generateFake(_preview) {
      var token = 'lorem.word';

      if (_preview.token == null && _preview.property != null) {
        token = "{{".concat(_preview.property, "}}");
      }

      if (_preview.token != null) {
        token = _preview.token;
      }

      if (typeof _preview === 'string') {
        token = "{{".concat(_preview, "}}");
      }

      try {
        if (process.env.STORYBOOK_WINGSUIT_FAKER_SEED != null) {
          if (!Number.isNaN(process.env.STORYBOOK_WINGSUIT_FAKER_SEED)) {
            faker.seed(parseInt(process.env.STORYBOOK_WINGSUIT_FAKER_SEED, 10));
          } else {
            console.error('STORYBOOK_WINGSUIT_FAKER_SEED must be numeric');
          }
        }

        return faker.fake(token);
      } catch (e) {
        if (e instanceof Error) {
          return "Invalid faker configuration \"".concat(token, "\". ").concat(e.message);
        }

        return '';
      }
    }
  }, {
    key: "cleanString",
    value: function cleanString(input) {
      var output = '';

      for (var i = 0; i < input.length; i += 1) {
        if (input.charCodeAt(i) <= 127 || input.charCodeAt(i) >= 160 && input.charCodeAt(i) <= 255) {
          output += input.charAt(i);
        }
      }

      return output;
    }
  }, {
    key: "getPreview",
    value: function getPreview() {
      if (_typeof(this.preview) === 'object') {
        var _this$preview;

        if (((_this$preview = this.preview) === null || _this$preview === void 0 ? void 0 : _this$preview.faker) != null) {
          return this.generateFake(this.preview.faker);
        }

        if (this.type === 'pattern' || this.type === 'object' || this.type === 'media_library') {
          return this.preview;
        }

        return JSON.stringify(this.preview);
      }

      var value = this.preview;

      if (typeof value === 'string' || value instanceof String) {
        value = this.cleanString(value);
      }

      return value;
    }
  }, {
    key: "setPreview",
    value: function setPreview(value) {
      this.preview = value;
    }
  }, {
    key: "getLabel",
    value: function getLabel() {
      return this.label;
    }
  }, {
    key: "setLabel",
    value: function setLabel(value) {
      this.label = value;
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }, {
    key: "setName",
    value: function setName(value) {
      this.name = value;
    }
  }, {
    key: "getType",
    value: function getType() {
      return this.type;
    }
  }, {
    key: "setType",
    value: function setType(value) {
      this.type = value;
    }
  }]);

  return Property;
}();

exports["default"] = Property;