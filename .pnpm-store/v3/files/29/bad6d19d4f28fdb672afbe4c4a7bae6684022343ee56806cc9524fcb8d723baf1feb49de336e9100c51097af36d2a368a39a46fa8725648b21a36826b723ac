"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.array.iterator.js");

var _webpack = require("webpack");

/**
 * Wingsuit PresetManager.
 */
// Library Imports
var merge = require('webpack-merge');

var _require = require('webpack'),
    ProgressPlugin = _require.ProgressPlugin,
    ProvidePlugin = _require.ProvidePlugin;

var TerserPlugin = require('terser-webpack-plugin');

var css = require('./presets/css');

var babel = require('./presets/babel');

var assets = require('./presets/assets');

var storybook = require('./presets/storybook');

var drupal = require('./presets/drupal');

var twing = require('./presets/twing');

var svg = require('./presets/svg');

var assetsVideos = require('./presets/assetsVideos');

var defaultPresets = {
  css: css,
  babel: babel,
  assets: assets,
  storybook: storybook,
  drupal: drupal,
  twing: twing,
  svg: svg,
  assetsVideos: assetsVideos
};
merge.multiple();

class PresetManager {
  constructor() {
    this.environment = 'production';
  }

  getDefaultPreset(name) {
    return defaultPresets[name];
  }

  getPresetName(preset, appConfig) {
    return preset.name != null ? preset.name(appConfig) : Math.random();
  }

  getPresetParameter(preset, appConfig, providedConfig) {
    var defaultConfig = preset.defaultConfig != null ? preset.defaultConfig(appConfig) : {};
    var appParameter = appConfig.getParameters != null ? appConfig.getParameters(this.getPresetName(preset, appConfig)) : {};
    return Object.assign(defaultConfig, appParameter, providedConfig);
  }

  getPresetDefinitions(appConfig) {
    var _this = this;

    var presets = [];

    if (appConfig.presets !== undefined) {
      appConfig.presets.forEach(function (item) {
        if (typeof item === 'string') {
          var lpreset = // eslint-disable-next-line global-require,import/no-dynamic-require
          _this.getDefaultPreset(item) != null ? _this.getDefaultPreset(item) : require(item);
          presets.push({
            preset: lpreset,
            name: _this.getPresetName(lpreset, appConfig),
            parameters: _this.getPresetParameter(lpreset, appConfig, {})
          });
        } else if (Array.isArray(item)) {
          var name = item[0];
          var _lpreset = name;

          if (typeof name === 'string') {
            // @ts-ignore
            // eslint-disable-next-line global-require,import/no-dynamic-require
            _lpreset = require(name);
          }

          var parameters = item[1];
          presets.push({
            preset: _lpreset,
            name: _this.getPresetName(_lpreset, appConfig),
            parameters: _this.getPresetParameter(_lpreset, appConfig, parameters)
          });
        } else if (typeof item === 'object') {
          presets.push( // @ts-ignore
          {
            preset: item,
            name: _this.getPresetName(item, appConfig),
            parameters: _this.getPresetParameter(item, appConfig, {})
          });
        }
      });
    }

    return presets;
  }
  /**
   * Returns true if a feature is supported by an extension.
   *
   * @param name
   *   The feature name.
   *
   * @return boolean
   *   True if feature is supported.
   */


  supportFeature(name, appConfig) {
    var presetDefinitions = this.getPresetDefinitions(appConfig);
    var support = false;
    Object.keys(presetDefinitions).forEach(function (key) {
      var preset = presetDefinitions[key].preset;

      if (preset != null && preset.supportFeature != null) {
        var presetSupport = preset.supportFeature(name);

        if (presetSupport === true) {
          support = true;
        }
      }
    });
    return support;
  }
  /**
   * Generates Wingsuit webpack config based on appConfig.
   *
   * @returns {*} - Fully merged and customized webpack config
   */


  generateWebpack(appConfig, webpackConfigs = []) {
    this.environment = appConfig.environment ? appConfig.environment : 'development';
    var presets = this.getPresetDefinitions(appConfig);
    var shared = [];
    Object.keys(presets).forEach(function (key) {
      if (presets[key] != null && presets[key].preset.webpack != null) {
        shared.push(presets[key].preset.webpack(appConfig, presets[key].parameters));
      }
    });
    var config = merge.smartStrategy({
      // Prepend the css style-loader vs MiniExtractTextPlugin
      entry: 'append',
      'module.rules.use': 'replace'
    })(...shared, ...webpackConfigs, ...[appConfig.webpack ? appConfig.webpack(appConfig) : {}, {
      resolve: {
        alias: appConfig.namespaces
      },
      output: {
        path: appConfig.absDistFolder
      },
      mode: this.environment,
      optimization: {
        minimizer: [new TerserPlugin({
          sourceMap: this.environment === 'production'
        })]
      },
      plugins: [new _webpack.DefinePlugin({
        BUILD_TARGET: JSON.stringify(appConfig.name)
      }), new ProgressPlugin({
        profile: false
      }), new ProvidePlugin({})]
    }]);
    Object.keys(presets).forEach(function (key) {
      if (presets[key].preset.webpackFinal != null) {
        config = presets[key].preset.webpackFinal(appConfig, config);
      }
    });
    config = appConfig.webpackFinal ? appConfig.webpackFinal(appConfig, config) : config;
    return config;
  }

}

exports.default = PresetManager;