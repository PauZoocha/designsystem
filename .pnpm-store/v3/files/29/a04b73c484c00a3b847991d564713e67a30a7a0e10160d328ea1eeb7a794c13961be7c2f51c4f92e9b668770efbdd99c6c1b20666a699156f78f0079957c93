/// <reference types="node" />
interface CssModesType {
    hot: any;
    extract: any;
}
export default class Wingsuit {
    private cssModes;
    private app;
    private environment;
    constructor();
    getCssModes(): CssModesType;
    private resolveAppConfig;
    private getApp;
    /**
     * Every app using Wingsuit must run its config through this "wingsuit"
     * function to ensure it adheres to Wingsuit standards of dev/prod config.
     *
     * @param {Object} appWebpack - The collection of shared, dev, prod webpack config
     * @param {Object} appWebpack.shared - Shared webpack config common to dev and prod
     * @param {Object} appWebpack.dev - Webpack config unique to dev
     * @param {Object} appWebpack.prod - Webpack config unique to prod
     * @param {Object} appConfig - Full app config
     * @param {Object} options - Compile options
     * @param {('hot'|'extract')} options.cssMode - The method of handling CSS output
     * @returns {*} - Fully merged and customized webpack config
     */
    generateWebpack(environment: string, module: NodeModule, options: any): any;
    /**
     * Wingsuit shard config.
     *
     * The shared loaders, plugins, and processing that all our "apps" should use.
     */
    getSharedWebpackConfig(): {
        mode: string;
        output: {
            filename: string;
        };
        node: {};
        devtool: string;
        module: {
            rules: ({
                test: RegExp;
                use: ({
                    loader: string;
                    options: {
                        sourceMap: boolean;
                        ident?: undefined;
                        config?: undefined;
                        root?: undefined;
                    };
                } | {
                    loader: string;
                    options: {
                        sourceMap: boolean;
                        ident: string;
                        config: {
                            path: string;
                        };
                        root?: undefined;
                    };
                } | {
                    loader: string;
                    options: {
                        sourceMap: boolean;
                        root: string;
                        ident?: undefined;
                        config?: undefined;
                    };
                })[];
                enforce?: undefined;
                exclude?: undefined;
                loader?: undefined;
                options?: undefined;
            } | {
                test: RegExp;
                enforce: string;
                exclude: RegExp;
                loader: string;
                options: {
                    emitWarning: boolean;
                    name?: undefined;
                };
                use?: undefined;
            } | {
                test: RegExp;
                exclude: RegExp;
                use: {
                    loader: string;
                };
                enforce?: undefined;
                loader?: undefined;
                options?: undefined;
            } | {
                test: RegExp;
                loader: string;
                options: {
                    name: string;
                    emitWarning?: undefined;
                };
                use?: undefined;
                enforce?: undefined;
                exclude?: undefined;
            } | {
                test: RegExp;
                use: {
                    loader: string;
                    options: {
                        name: string;
                    };
                }[];
                enforce?: undefined;
                exclude?: undefined;
                loader?: undefined;
                options?: undefined;
            })[];
        };
        optimization: {
            minimizer: any[];
        };
        plugins: any[];
    };
}
export {};
