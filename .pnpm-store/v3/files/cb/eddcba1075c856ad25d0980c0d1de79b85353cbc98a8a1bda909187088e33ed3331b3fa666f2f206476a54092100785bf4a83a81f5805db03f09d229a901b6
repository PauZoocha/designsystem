"use strict";

require("core-js/modules/es.object.define-property.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.supportFeature = supportFeature;
exports.webpack = webpack;

require("core-js/modules/es.array.reduce.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.object.assign.js");

require("core-js/modules/es.array.concat.js");

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var MiniCssExtractPlugin = require('mini-css-extract-plugin');

var OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');

var glob = require('glob');

function supportFeature(name, appConfig) {
  if (name === 'scss') {
    return true;
  }

  return false;
}

function webpack(appConfig) {
  var scssItems = glob.sync("".concat(appConfig.absDesignSystemPath, "/**/*.scss"));
  var scssEntries = scssItems.reduce(function (acc, item) {
    var name = _path["default"].basename(item).replace('.scss', ''); // Remove scss files starting with '_'


    if (name.indexOf('_') !== 0) {
      acc["".concat(name)] = item;
    }

    return acc;
  }, {});
  var loader = [{
    loader: require.resolve('css-loader'),
    options: {
      sourceMap: true
    }
  }, Object.assign({
    // PostCSS config at ./postcss.config.js
    loader: require.resolve('postcss-loader')
  }, appConfig.postCssConfig), {
    loader: require.resolve('resolve-url-loader'),
    options: {
      sourceMap: true,
      root: ''
    }
  }, {
    loader: require.resolve('sass-loader') // compiles Sass to CSS

  }];
  /**
   * CSS modes are import to frontend dev. Wingsuit currently supports hot
   * reloading or full css file extraction.
   */

  var cssModes = {
    // 'hot' uses the style-loader plugin which rewrites CSS inline via
    // webpack-dev-server and is purely development-mode ONLY. style-loader
    // CANNOT exists alongside MiniCsExtractPlugin
    hot: {
      // Webpack for hot starts here
      module: {
        rules: [{
          test: /\.scss$/,
          use: [{
            loader: require.resolve('style-loader')
          }].concat(loader)
        }]
      }
    },
    // 'extract' uses MiniCssExtractPlugin.loader to write out actual CSS files to
    // the filesystem. This is useful for production builds, and webpack --watch
    extract: {
      entry: Object.assign({}, scssEntries),
      // Webpack for extract starts here
      module: {
        rules: [{
          test: /\.scss$/,
          use: [{
            loader: MiniCssExtractPlugin.loader,
            options: {
              publicPath: './'
            }
          }].concat(loader)
        }]
      },
      plugins: [new OptimizeCSSAssetsPlugin({
        // Ensure css map file output
        cssProcessorOptions: {
          map: {
            inline: false,
            annotation: true
          }
        }
      }), new MiniCssExtractPlugin({
        filename: '[name].css',
        chunkFilename: 'css/[id].css'
      })]
    }
  };
  return cssModes[appConfig.cssMode ? appConfig.cssMode : 'extract'];
}