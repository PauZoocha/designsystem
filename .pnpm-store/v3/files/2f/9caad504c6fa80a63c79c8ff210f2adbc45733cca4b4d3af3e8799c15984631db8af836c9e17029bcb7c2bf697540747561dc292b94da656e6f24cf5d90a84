"use strict";

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.array.iterator.js");

var _commander = _interopRequireDefault(require("commander"));

var _leven = _interopRequireDefault(require("leven"));

var _startApps = _interopRequireDefault(require("./startApps"));

var _initiate = _interopRequireDefault(require("./initiate"));

var _component = _interopRequireDefault(require("./component"));

var _app = _interopRequireDefault(require("./app"));

var _version = _interopRequireDefault(require("./version"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = console;

_commander.default.command('init').description('Install Wingsuit.').option('-f --folder <folder>', 'The target folder').option('-s --skip-install', 'Skip installing deps').option('-k --starter-kit <kit>', 'Select your starter kit. Available starter kits are tailwind, bootstrap. Default is tailwind', 'tailwind').option('-N --use-npm', 'Use npm to install deps').option('-S --smoke-test', 'Exit after successful start').option('-B --branch <branch>', 'Use a specific branch').action(options => (0, _initiate.default)(options));

_commander.default.command('version').description('Shows Wingsuit version.').action(options => (0, _version.default)(options));

_commander.default.command('generate-component').description('Generate Wingsuit component.').option('-N --use-npm', 'Use npm to install deps').action(options => (0, _component.default)(options));

_commander.default.command('generate-app').description('Generate Wingsuit app.').option('-N --use-npm', 'Use npm to install deps').action(options => (0, _app.default)(options));

_commander.default.command('dev').option('-D --docs', 'Build a documentation-only site using addon-docs').description('Start Wingsuit App in dev mode.').action(options => (0, _startApps.default)(options, 'development'));

_commander.default.command('build').option('-D --docs', 'Build a documentation-only site using addon-docs').option('-o --output-dir <path>', 'Directory where to store built files').description('Build Wingsuit App.').action(options => (0, _startApps.default)(options, 'production'));

_commander.default.command('*', '').action(() => {
  const [,, invalidCmd] = process.argv;
  logger.error(' Invalid command: %s.\n See --help for a list of available commands.', invalidCmd); // eslint-disable-next-line

  const availableCommands = _commander.default.commands.map(cmd => cmd._name);

  const suggestion = availableCommands.find(cmd => (0, _leven.default)(cmd, invalidCmd) < 3);

  if (suggestion) {
    logger.log(`\n Did you mean ${suggestion}?`);
  }

  process.exit(1);
});

_commander.default.usage('<command> [options]').version('1').parse(process.argv);

if (_commander.default.rawArgs.length < 3) {
  _commander.default.help();
}