"use strict";

require("core-js/modules/es.object.define-property.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PatternProperties = void 0;

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.object.keys.js");

require("core-js/modules/es.array.for-each.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.array.concat.js");

var _react = _interopRequireDefault(require("react"));

var _components = require("@storybook/components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getOptionString(setting) {
  if (setting.options) {
    return "<br><strong>Options:</strong><br> ".concat(Object.keys(setting.getOptions()).join('  |  '));
  }

  return '';
}

var PatternProperties = function PatternProperties(props) {
  var properties = {};
  var variant = props.variant;
  var fields = variant.getFields();
  properties.Fields = {
    name: 'Fields',
    rows: {}
  };
  Object.keys(fields).forEach(function (key) {
    var field = fields[key];

    if (field.isEnable()) {
      properties.Fields.rows[key] = {
        name: key,
        type: field.getType(),
        description: "<b>[".concat(field.getType(), "]</b> ").concat(field.getLabel(), " <br> ").concat(field.getDescription() != null ? field.getDescription() : '')
      };
    }
  });
  var settings = variant.getSettings();
  properties.Settings = {
    name: 'Settings',
    rows: {}
  };
  Object.keys(settings).forEach(function (key) {
    var setting = settings[key];

    if (setting.isEnable()) {
      properties.Settings.rows[key] = {
        name: setting.getName(),
        description: "<b>[".concat(setting.getType(), "]</b> ").concat(setting.getLabel(), " <br> ").concat(setting.getDescription() != null ? "".concat(setting.getDescription(), " <br> ") : '', " ").concat(getOptionString(setting)),
        defaultValue: {
          summary: setting.getDefaultValue()
        },
        type: {
          name: setting.getLabel(),
          required: setting.isRequired()
        }
      };
    }
  });
  return /*#__PURE__*/_react["default"].createElement(_components.TabbedArgsTable, {
    tabs: properties
  });
};

exports.PatternProperties = PatternProperties;
PatternProperties.displayName = 'PatternProperties';
var _default = PatternProperties;
exports["default"] = _default;