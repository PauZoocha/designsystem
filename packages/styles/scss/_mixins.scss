//*------------------------------------*\
//    $MIXINS
//*------------------------------------*/
@use "tokens" as *;
@use "functions" as *;

// ======================================
// Output font styles
// ======================================
/// Retrieve the usual font styles for a given type styling
/// @param {String} $stylename - the name of the style to get
/// @return {CSS} font size, line-height, and letter-spacing for this type style
@mixin font-styles($stylename) {
  font-size: map-get($type, $stylename, "size");
  letter-spacing: map-get($type, $stylename, "letter-spacing");
  line-height: map-get($type, $stylename, "line-height");
}

// ======================================
// Vertical Align
// ======================================

@mixin vertical-align {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

// ======================================
// Horizontal Align
// ======================================

@mixin horizontal-align {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

@mixin vertical-horizontal-align {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// ======================================
// Visually Hidden
//
// Visually hide the element from the
// screen but still have it accessible
// via screenreaders
//
// ======================================
@mixin isVisuallyHidden() {
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  position: absolute;
  clip: rect(0 0 0 0);
  overflow: hidden;
}

// ======================================
// Ellipsis
// ======================================

@mixin ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// ======================================
// Breakpoint
// ======================================

@mixin breakpoint($breakpoint, $max: false) {
  @if map-has-key($breakpoints, $breakpoint) {
    @if not $max {
      @media screen and (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }

    @if $max {
      @media screen and (max-width: #{map-get($breakpoints, $breakpoint) - 1px}) {
        @content;
      }
    }
  }
}

// ======================================
// Text Margin
//
// calculates reduced margin to account
// for line-height and descenders
// ======================================

@mixin textmargin(
  $margin,
  $marginval,
  $stylename,
  $descender,
  $stylename2: false,
  $descender2: false
) {
  @if $stylename2 != false {
    #{$margin}: px-to-rem(
      margin-adjust(
        $marginval,
        map-get($type, "descenders", $descender),
        map-get($type, $stylename, "size"),
        map-get($type, $stylename, "line-height")
      )
    );
  } @else {
    #{$margin}: px-to-rem(
      margin-adjust(
        $marginval,
        map-get($type, "descenders", $descender),
        map-get($type, $stylename, "size"),
        map-get($type, $stylename, "line-height"),
        map-get($type, "descenders", $descender2),
        map-get($type, $stylename2, "size"),
        map-get($type, $stylename2, "line-height")
      )
    );
  }
}

// ======================================
// Spacing Values
// ======================================

@mixin spacingvalues($type, $mappath) {
  #{$type}: px-to-rem(map-get($spacing, "ux", $mappath, $type, "top"))
    px-to-rem(map-get($spacing, "ux", $mappath, $type, "right"))
    px-to-rem(map-get($spacing, "ux", $mappath, $type, "bottom"))
    px-to-rem(map-get($spacing, "ux", $mappath, $type, "left"));
}

// ======================================
// Border Values
// ======================================

@mixin bordervalues($mappath, $state: "default") {
  border-bottom: px-to-rem(
      map-get($spacing, "ux", $mappath, "border", "bottom")
    )
    solid map-get($color, "ux", $mappath, $state, "border", "bottom");
  border-left: px-to-rem(map-get($spacing, "ux", $mappath, "border", "left"))
    solid map-get($color, "ux", $mappath, $state, "border", "left");
  border-right: px-to-rem(map-get($spacing, "ux", $mappath, "border", "right"))
    solid map-get($color, "ux", $mappath, $state, "border", "right");
  border-top: px-to-rem(map-get($spacing, "ux", $mappath, "border", "top"))
    solid map-get($color, "ux", $mappath, $state, "border", "top");
}

// ======================================
// Border Radius Values
// ======================================

@mixin borderradius($mappath) {
  border-bottom-left-radius: map-get($radius, $mappath, "bottom-left");
  border-bottom-right-radius: map-get($radius, $mappath, "bottom-right");
  border-top-left-radius: map-get($radius, $mappath, "top-left");
  border-top-right-radius: map-get($radius, $mappath, "top-right");
}

// ======================================
// Box Padding Values
// ======================================

@mixin boxpadding($mappath, $size) {
  padding-bottom: map-get($spacing, "boxpadding", $mappath, $size, "bottom");
  padding-left: map-get($spacing, "boxpadding", $mappath, $size, "left");
  padding-right: map-get($spacing, "boxpadding", $mappath, $size, "right");
  padding-top: map-get($spacing, "boxpadding", $mappath, $size, "top");
}

// ======================================
// Data URL Icon
// ======================================

@mixin dataurlicon($name, $color: $color-base-neutrals-black) {
  background-image: url("#{colortodataurlicon($name, $color)}");
}

// ======================================
// Icon Button
// ======================================

@mixin iconbutton($name, $height, $width, $color: $color-base-neutrals-black) {
  background-position: center center;
  background-repeat: no-repeat;
  background-size: $width $height;
  @include dataurlicon($name, $color);
}

// ======================================
// Link styles
// ======================================

@mixin linkstyles() {
  background: map-get($color, "link", "background", "default");
  border-bottom: $widths-border-sm solid
    map-get($color, "link", "default", "default");
  color: map-get($color, "link", "text", "default");
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
  text-decoration: none;

  &:visited {
    background: map-get($color, "link", "background", "visited");
    border-bottom: $widths-border-sm solid
      map-get($color, "link", "underline", "visited");
    color: map-get($color, "link", "text", "visited");
  }

  &:hover {
    background: map-get($color, "link", "background", "hover");
    border-bottom: $widths-border-med solid
      map-get($color, "link", "underline", "hover");
    color: map-get($color, "link", "text", "hover");
    text-decoration: none;
  }

  &:active {
    background: map-get($color, "link", "background", "active");
    border-bottom: $widths-border-lg solid
      map-get($color, "link", "underline", "active");
    color: map-get($color, "link", "text", "active");
    outline: none;
  }

  &:focus {
    background: map-get($color, "link", "background", "focus");
    border-bottom: $widths-border-lg solid
      map-get($color, "link", "underline", "focus");
    color: map-get($color, "link", "text", "focus");
    outline: none;
  }

  &--dark {
    background: map-get($color, "link", "background-dark", "default");
    border-bottom: $widths-border-sm solid
      map-get($color, "link", "underline-dark", "default");
    color: map-get($color, "link", "text-dark", "default");

    &:visited {
      background: map-get($color, "link", "background-dark", "visited");
      border-bottom: $widths-border-sm solid
        map-get($color, "link", "underline-dark", "visited");
      color: map-get($color, "link", "text-dark", "visited");
    }

    &:hover {
      background: map-get($color, "link", "background-dark", "hover");
      border-bottom: $widths-border-med solid
        map-get($color, "link", "underline-dark", "hover");
      color: map-get($color, "link", "text-dark", "hover");
    }

    &:active {
      background: map-get($color, "link", "background-dark", "active");
      border-bottom: $widths-border-lg solid
        map-get($color, "link", "underline-dark", "active");
      color: map-get($color, "link", "text-dark", "active");
      outline: none;
    }

    &:focus {
      background: map-get($color, "link", "background-dark", "focus");
      border-bottom: $widths-border-lg solid
        map-get($color, "link", "underline-dark", "focus");
      color: map-get($color, "link", "text-dark", "focus");
      outline: none;
    }
  }

  &--footer {
    @include font-styles("body-xxs");

    background: map-get($color, "link", "background-footer", "default");
    border-bottom: $widths-border-sm solid
      map-get($color, "link", "underline-footer", "default");
    color: map-get($color, "link", "text-footer", "default");

    &:visited {
      background: map-get($color, "link", "background-footer", "visited");
      border-bottom: $widths-border-sm solid
        map-get($color, "link", "underline-footer", "visited");
      color: map-get($color, "link", "text-footer", "visited");
    }

    &:hover {
      background: map-get($color, "link", "background-footer", "hover");
      border-bottom: $widths-border-med solid
        map-get($color, "link", "underline-footer", "hover");
      color: map-get($color, "link", "text-footer", "hover");
    }

    &:active {
      background: map-get($color, "link", "background-footer", "active");
      border-bottom: $widths-border-lg solid
        map-get($color, "link", "underline-footer", "active");
      color: map-get($color, "link", "text-footer", "active");
      outline: none;
    }

    &:focus {
      background: map-get($color, "link", "background-footer", "focus");
      border-bottom: $widths-border-lg solid
        map-get($color, "link", "underline-footer", "focus");
      color: map-get($color, "link", "text-footer", "focus");
      outline: none;
    }
  }
}

// ======================================
// Tag styles
// ======================================

@mixin tagstyles() {
  @include font-styles("nav-md-sm");

  background: map-get($color, "tag", "background", "default");
  border: none;
  color: map-get($color, "tag", "text", "default");
  display: inline-block;
  font-family: map-get($fonts, "display");
  font-size: inherit;
  font-weight: 500;
  line-height: inherit;
  padding: px-to-rem(10px) px-to-rem(map-get($spacing, "ui-padding-sm"));
  text-decoration: none;
  $self: &;

  &--active {
    background: map-get($color, "tag", "background", "active");
    color: map-get($color, "tag", "text", "active");
    outline: none;
  }

  &--anchor {
    cursor: pointer;

    #{self}--active {
      background: map-get($color, "tag", "background", "active");
      color: map-get($color, "tag", "text", "active");
      outline: none;
    }

    &:hover {
      background: map-get($color, "tag", "background", "hover");
      color: map-get($color, "tag", "text", "hover");
      text-decoration: none;
    }

    &:focus {
      background: map-get($color, "tag", "background", "focus");
      color: map-get($color, "tag", "text", "focus");
      outline: none;
    }
  }

  &--button {
    @include font-styles("label-small");

    cursor: pointer;
    display: none;
    opacity: 0;
    padding-right: 36px;
    position: relative;
    visibility: hidden;

    &.ilo--tag--active {
      background: map-get($color, "tag", "background", "active");
      color: map-get($color, "tag", "text", "active");
      display: block;
      opacity: 1;
      outline: none;
      visibility: visible;
    }

    &:hover {
      background: map-get($color, "tag", "background", "hover");
      color: map-get($color, "tag", "text", "hover");
      text-decoration: none;
    }

    &:focus {
      background: map-get($color, "tag", "background", "focus");
      color: map-get($color, "tag", "text", "focus");
      outline: none;
    }

    &.icon__position--right {
      .ilo--icon {
        @include dataurlicon("close", map-get($color, "tag", "text", "active"));

        height: 100%;
        max-height: 28px;
        max-width: 28px;
        position: absolute;
        right: 5px;
        top: 6px;
        width: 100%;
      }
    }
  }
}
