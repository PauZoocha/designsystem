@use "../tokens" as *;
@import "../mixins";

.ilo--button {
  display: inline-block;
  font-family: $fonts-display;
  font-weight: map-get($type, "weights", "label");
  @include borderradius("button");

  .link__label,
  .button__label {
    display: inline-block;
  }

  &.icon {
    position: relative;

    .ilo--icon {
      height: 100%;
      max-height: calc($spacing-icons-icon-height-lg * 2);
      max-width: calc($spacing-icons-icon-height-lg * 2);
      position: absolute;
      width: 100%;
    }

    &.icon__position--left {
      .link__label,
      .button__label {
        padding-left: $spacing-boxpadding-button-icon-large-left;
      }

      .ilo--icon {
        left: calc($spacing-icons-icon-padding-lg - 4px);
        top: calc($spacing-boxpadding-button-icon-large-top - 1px);
      }
    }

    &.icon__position--right {
      .link__label,
      .button__label {
        padding-right: $spacing-boxpadding-button-icon-large-right;
      }

      .ilo--icon {
        right: calc($spacing-icons-icon-padding-lg - 4px);
        top: calc($spacing-boxpadding-button-icon-large-top - 1px);
      }
    }
  }

  &--large {
    .link__label,
    .button__label {
      @include boxpadding("button", "large");
      @include font-styles("label-large");
    }
  }

  &--medium {
    .link__label,
    .button__label {
      @include boxpadding("button", "medium");
      @include font-styles("label-medium");
    }

    &.icon {
      .ilo--icon {
        max-height: calc($spacing-icons-icon-height-m * 2);
        max-width: calc($spacing-icons-icon-height-m * 2);
        position: absolute;
      }

      &.icon__position--left {
        .link__label,
        .button__label {
          padding-left: $spacing-boxpadding-button-icon-medium-left;
        }

        .ilo--icon {
          left: calc($spacing-icons-icon-padding-m - 4px);
          top: calc($spacing-boxpadding-button-icon-medium-top - 3px);
        }
      }

      &.icon__position--right {
        .link__label,
        .button__label {
          padding-right: $spacing-boxpadding-button-icon-medium-right;
        }

        .ilo--icon {
          right: calc($spacing-icons-icon-padding-m - 4px);
          top: calc($spacing-boxpadding-button-icon-medium-top - 3px);
        }
      }
    }
  }

  &--small {
    .link__label,
    .button__label {
      @include boxpadding("button", "small");
      @include font-styles("label-small");
    }

    &.icon {
      .ilo--icon {
        max-height: calc($spacing-icons-icon-height-sm * 2);
        max-width: calc($spacing-icons-icon-height-sm * 2);
        position: absolute;
      }

      &.icon__position--left {
        .link__label,
        .button__label {
          padding-left: $spacing-boxpadding-button-icon-small-left;
        }

        .ilo--icon {
          left: calc($spacing-icons-icon-padding-sm - 4px);
          top: calc($spacing-boxpadding-button-icon-small-top - 1px);
        }
      }

      &.icon__position--right {
        .link__label,
        .button__label {
          padding-right: $spacing-boxpadding-button-icon-small-right;
        }

        .ilo--icon {
          right: calc($spacing-icons-icon-padding-sm - 4px);
          top: calc($spacing-boxpadding-button-icon-small-top - 1px);
        }
      }
    }
  }

  &--primary {
    background-color: map-get($color, "ux", "background", "attention");
    border: map-get($borders, "base")
      map-get($color, "ux", "borders", "attention") solid;
    color: map-get($color, "ux", "labels", "attention");
  }

  &--secondary {
    background-color: map-get($color, "ux", "background", "default");
    border: map-get($borders, "base")
      map-get($color, "ux", "borders", "default") solid;
    color: map-get($color, "ux", "labels", "actionable");
  }

  &--tertiary {
    background-color: map-get($color, "ux", "background", "highlight");
    border: map-get($borders, "base")
      map-get($color, "ux", "borders", "default") solid;
    color: map-get($color, "ux", "labels", "actionable");
  }

  &:focus {
    background-color: map-get($color, "ux", "background", "focus");
    border: map-get($borders, "base") map-get($color, "ux", "borders", "thick")
      solid;
    color: map-get($color, "ux", "labels", "focus");
    outline: none;
  }

  &:hover {
    background-color: map-get($color, "ux", "background", "hover");
    border: map-get($borders, "base") map-get($color, "ux", "borders", "hover")
      solid;
    color: map-get($color, "ux", "labels", "hover");
    cursor: pointer;
  }

  &:active {
    background-color: map-get($color, "ux", "background", "active");
    border: map-get($borders, "base") map-get($color, "ux", "borders", "active")
      solid;
    color: map-get($color, "ux", "labels", "active");
  }

  &:disabled {
    opacity: map-get($opacity, "disabled");
    pointer-events: none;
  }
}
